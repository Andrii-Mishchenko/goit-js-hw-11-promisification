{"version":3,"sources":["js/task-1.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then"],"mappings":";AAOA,IAAMA,EAAQ,SAAAC,GACH,OAAA,IAAIC,QAAQ,SAACC,GAChBC,WAAW,WACPD,EAAQF,IACVA,MAIJI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAOnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ","file":"task-1.4deaafa0.js","sourceRoot":"..\\src","sourcesContent":["/* \r\n* Напиши функцию delay(ms), которая возвращает промис, \r\n* переходящий в состояние \"resolved\" через ms миллисекунд.\r\n* Значением исполнившегося промиса должно быть то кол - во миллисекунд,\r\n* которое передали во время вызова функции delay.\r\n*/\r\n\r\nconst delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms)\r\n        },ms)\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// function logger(time) {\r\n//     console.log(`Resolved after ${time}ms`);\r\n// }\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"]}